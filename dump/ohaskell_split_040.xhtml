<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru-RU">
  <!-- This file was converted to xhtml by Writer2xhtml ver. 1.0.2. See http://writer2latex.sourceforge.net for more info. -->
  <head>
    <title>Неизв.</title>
    <meta content="" name="description"/>
    <meta content="" name="keywords"/>
    <link href="http://purl.org/dc/elements/1.1/" rel="schema.DC"/>
    <meta content="" name="DC.title"/>
    <meta content="" name="DC.subject"/>
    <meta content="" name="DC.description"/>
    <meta content="" name="DC.creator"/>
    <meta content="2014-03-16T18:27:08" name="DC.date"/>
    <meta content="" name="DC.language"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body dir="ltr" class="calibre">
<h2 id="toc128" class="calibre8">Монады: суть</h2>
    <p class="calibre16">Произнесите это слово: «монада». Вам страшно? Нет?? Быть не может! Вам должно быть страшно. Все знают, что монады — это самое страшное и самое сложное что есть в языке Haskell!</p>
    <p class="calibre16">Позвольте открыть вам тайну: ничего сложного в этих монадах нет.</p>
    <h3 id="toc129" class="calibre22">Почему их так боятся</h3>
    <p class="calibre16">Термин «монада» (от греческого μονάς, «единица») пришло в Haskell из мира математики, а именно из теории категорий. Послушайте, как это звучит:</p>
    <p class="calibre16"> </p>
    <p class="calibre24">Монада может быть определена через общее понятие моноида в моноидальной категории. Монада над категорией K — это моноид в моноидальной категории эндофункторов End(K).</p>
    <p class="calibre16"> </p>
    <p class="calibre16">Вот поэтому их и боятся: с таким же успехом это определение могло быть написано на китайском. Лично я понял из него чуть меньше чем ничего. Да, я прекрасно понял бы это определение, если бы был знаком с той самой теорией категорий. К счастью, понять суть монад можно и без изучения этой теории.</p>
    <h3 id="toc130" class="calibre22">Определение</h3>
    <p class="calibre16">Монады — это механизм, привносящий императивный подход в чисто функциональный язык. Вот и всё. Если нам нужно связать некие шаги в чёткую последовательную цепочку — значит нам нужен монадический механизм.</p>
    <p class="calibre16">Впрочем, разве мы не говорили об императивном подходе, рассматривая <span class="SourceText">do</span>-нотацию и взаимодействия с внешним миром? Говорили. Потому что упомянутый в предыдущих главах тип <span class="SourceText">IO</span> имеет самое прямое отношения к монадам. А если вспомнить, что ни одно приложение на Haskell не может обойтись без взаимодействия с внешним миром, становится ясно: даже однострочное приложение уровня <span class="SourceText">"Hello World"</span> использует монадический механизм.</p>
    <p class="calibre16"> </p>
    <p class="calibre16"> </p>
    <h3 id="toc131" class="calibre22">Иллюстрация</h3>
    <p class="calibre16">Если вы используете Unix-подобную операционную систему, откройте терминал и введите:</p>
    <p class="calibre16"> </p>
    <p class="a">$ cd /usr/lib</p>
    <p class="a">$ ls | grep xml</p>
    <p class="calibre16"> </p>
    <p class="calibre16">Обратите внимание на вторую команду. Это — Unix-канал, связывающий две системные утилиты, а если точнее, связывающий не утилиты, а результаты работы этих утилит. Взгляните:</p>
    <p class="calibre16"> </p>
    <p class="aa">ls         |      grep xml</p>
    <p class="aa">процесс 1  канал  процесс 2</p>
    <p class="calibre16"> </p>
    <p class="calibre16">Когда первый процесс, соответствующий системной утилите <span class="SourceText">ls</span>, выполнится, он вернёт текст, отображающий содержимое текущего каталога. Этот текст поступает на вход Unix-канала и затем, выходя из него, поступает на вход второго процесса, соответствующего системной утилите <span class="SourceText">grep</span>. Второй процесс фильтрует полученный текст по слову <span class="SourceText">"xml"</span> и возвращает некий результат.</p>
    <p class="calibre16">Таким образом, Unix-канал создал цепочку из двух звеньев, на выходе из которой мы получаем итоговое «значение», явившееся результатом последовательного выполнения двух «вычислений». И эта цепочка характеризуется двумя важными свойствами: последовательность и изоляция.</p>
    <p class="calibre16">Последовательность даёт нам твёрдую уверенность в том, что до тех пор, пока утилита <span class="SourceText">ls</span> не завершит свою работу, мы не перейдём к утилите <span class="SourceText">grep</span>. Да, с технической точки зрения обе эти утилиты запускаются <span class="calibre17">одновременно</span>, но для нас их взаимодействие выглядит именно как последовательность двух шагов: завершили первый, перешли ко второму.</p>
    <p class="calibre16">А изоляция обеспечивает взаимодействие звеньев, ничего не знающих друг о друге. Утилита <span class="SourceText">ls</span> не догадывается о том, что результат её работы будет подан на вход утилите <span class="SourceText">grep</span>. Да и утилита <span class="SourceText">grep</span> остаётся в полном неведении о том, что имеет дело с результатом работы утилиты <span class="SourceText">ls</span>.</p>
    <p class="calibre16">Взаимодействие двух этих утилит стало возможным только благодаря тому, что обе они имеют дело с общим «типом данных», а именно с текстом: утилита слева от канала <span class="calibre18">возвращает</span> текст, а утилита справа от канала <span class="calibre18">принимает</span> текст.</p>
    <p class="calibre16">В этом и заключается простая суть монадического механизма: связать в последовательную цепочку вычисления, ничего друг о друге не знающие. Теперь вы понимаете, почему работа с вводом и выводом неразрывно связана с монадами, ведь <span class="SourceText">IO</span> — это и есть одна из монад. Рассмотрим <span class="SourceText">IO</span> внимательнее.</p>
    </body>
</html>
