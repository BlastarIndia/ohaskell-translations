<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru-RU">
  <!-- This file was converted to xhtml by Writer2xhtml ver. 1.0.2. See http://writer2latex.sourceforge.net for more info. -->
  <head>
    <title>Неизв.</title>
    <meta content="" name="description"/>
    <meta content="" name="keywords"/>
    <link href="http://purl.org/dc/elements/1.1/" rel="schema.DC"/>
    <meta content="" name="DC.title"/>
    <meta content="" name="DC.subject"/>
    <meta content="" name="DC.description"/>
    <meta content="" name="DC.creator"/>
    <meta content="2014-03-16T18:27:08" name="DC.date"/>
    <meta content="" name="DC.language"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body dir="ltr" class="calibre">
<h2 id="toc24" class="calibre8">Чистая функциональность</h2>
    <p class="calibre16">Haskell — чисто функциональный язык программирования общего назначения.</p>
    <p class="calibre16">Исторически сложилось так, что <span class="calibre17">наиболее</span> популярным ныне подходом к написанию программ является <span class="calibre18">императивный</span> подход (от английского imperative, приказание). При таком подходе программа представляет собой набор инструкций, которые должны быть выполнены строго в том порядке, в котором эти инструкции указаны. Кроме этого, императивное программирование подразумевает наличие оператора присваивания, потому что программист часто меняет состояние множества переменных.</p>
    <p class="calibre16">Однако существует принципиально иной подход к написанию программ, а именно <span class="calibre18">декларативный</span> (от английского declarative, описание), при котором программа представляет собой набор описаний того, что же она должна в итоге сделать. Функциональное программирование является одним из воплощений декларативного подхода. При таком подходе порядок выполнения инструкций зачастую неважен. Более того, в Haskell нет оператора присваивания, и все переменные в нём вовсе не переменные, а самые что ни на есть <span class="calibre18">постоянные</span>.</p>
    <p class="calibre16">И чтобы окончательно сбить вас с толку, упомяну такие свойства Haskell, как: </p>
    <ol class="calibre19">
      <li class="calibre20">
        <p class="calibre16">наличие чистых функций, </p>
      </li>
      <li class="calibre20">
        <p class="calibre16">разграничение чистых функций от функций с побочными эффектами,</p>
      </li>
      <li class="calibre20">
        <p class="calibre16">ленивость вычислений.</p>
      </li>
    </ol>
    <p class="calibre16">Звучит весьма странно, поэтому прямо сейчас мы начнём разбираться.</p>
    </body>
</html>
